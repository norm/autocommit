#!/bin/bash

set -eu

latency=4.0
remote=origin
branch=main
verbose=0
timeout=0
LAST_CHANGE=$(mktemp /tmp/autocommit.timestamp.XXXXX)


function main {
    local last_copy=0

    check_for_tools

    using="${repo_dir:=$source_dir}"
    pushd_silent "$using"
    check_is_repo

    while read timestamp file; do
        file="${file#$source_dir/}"

        # skip changes to the git repo
        [[ "$file" == .git/* ]] && continue

        # skip multiple file notifications that have already been processed
        if [ $last_copy -gt $timestamp ]; then
            status "(old) $file" verbose
            continue
        else
            status "changed $file" verbose
        fi

        [ -n "$repo_dir" ] && copy_files_to_repo
        touch $LAST_CHANGE
        commit_changes $(last_change) &

        last_copy=$(date +%s)
    done < <( fswatch -tf'%s' --latency $latency "$source_dir" )
}

function check_for_tools {
    need git
    need fswatch
    need realpath
}

function need {
    if ! type "$1" &>/dev/null; then
        echo "$1: required tool not found, aborting."
        exit 3
    fi
}

function check_is_repo {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "Error with '${using}'"
        echo ''
        echo "This directory is not a git repository."
        exit 1
    fi
}

function copy_files_to_repo {
    rsync \
        --archive \
        --hard-links \
        --itemize-changes \
        --inplace \
        --delete \
        --exclude ".git" \
            "$source_dir/." \
            .
}

function commit_changes {
    timestamp=$1

    status "waiting $timeout to commit" verbose
    sleep $timeout
    if [ $(last_change) = $timestamp ]; then
        if [ -n "$(git status --porcelain)" ]; then
            git add --all

            status "git commit"
            num_changed=$(git status --porcelain | wc | awk '{ print $1 }')
            if [ $num_changed = 1 ]; then
                file=$(git status --porcelain | cut -c4-)
                git commit --message "${file} changed"
            else
                git commit --message "${num_changed} files changed"
            fi

            status "git push"
            git push $remote $branch
        else
            status "no changes to commit" verbose
        fi
    else
        status "changed since commit queued" verbose
    fi
}

function last_change {
    stat -f'%m' $LAST_CHANGE
}

function status {
    local bold="\e[1m"
    local green="\e[32m"
    local reset="\e[0m"
    local text="$1"
    local is_verbose="${2:-}"

    if [ -n "$is_verbose" ]; then
        [ $verbose != 1 ] || echo "-- $text"
    else
        printf "${bold}== ${green}${text}${reset}\n"
    fi
}

function pushd_silent {
    pushd "$1" >/dev/null
}

while getopts "b:hl:r:t:v" option; do
    case $option in
        b)  branch=$OPTARG ;;
        h)  exec perldoc -T $0 ;;
        l)  latency=$OPTARG ;;
        r)  remote=$OPTARG ;;
        t)  timeout=$OPTARG ;;
        v)  verbose=1 ;;
    esac
done
shift $(( OPTIND -1 ))

[ "$#" -lt 1 ] && exec pod2usage $0

source_dir="$(realpath "$1")"
repo_dir=''
[ -n "${2:-}" ] && repo_dir="$(realpath "$2")"
main
exit 0


=pod

=head1 NAME

B<autogit> - git commit and push directory changes

=head1 SYNOPSIS

B<autogit> [-h] [-b branch] [-l latency] [-r remote] [-v] source_dir [repo_dir]

Watch I<source_dir> for changes, optionally copy them to I<repo_dir>, 
then commit them to git and push to a remote.

=head1 OPTIONS

=over

=item B<-h>

print full help text

=item B<-b> I<branch>

use I<branch> as the remote branch to push to. Defaults to C<main>.

=item B<-l> I<latency>

use I<latency> as the latency for fswatch (how long between batches of
notifications). Default is 4.0.

Larger values are useful when multiple sizeable files are changed as part of a
single operation (eg saving binary files).

=item B<-r> I<remote>

use I<remote> as the remote target to push to. Defaults to C<origin>.

=item B<-t> I<timeout>

wait I<timeout> seconds before committing, to see if any further
changes occur. Default is 0.

Larger values mean fewer commits when a quick burst of changes happen. Too
large a value may mean never committing if the files are in constant use.

=item B<-v>

be more verbose about file changes, even when ignored

=back
